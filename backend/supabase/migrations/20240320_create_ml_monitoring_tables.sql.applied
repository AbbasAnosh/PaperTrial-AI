-- Create ML model metrics table
CREATE TABLE IF NOT EXISTS ml_model_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    model_id UUID NOT NULL REFERENCES ml_models(id) ON DELETE CASCADE,
    metrics JSONB NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create ML inference metrics table
CREATE TABLE IF NOT EXISTS ml_inference_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    model_id UUID NOT NULL REFERENCES ml_models(id) ON DELETE CASCADE,
    latency_ms FLOAT NOT NULL,
    input_size INTEGER NOT NULL,
    success BOOLEAN NOT NULL,
    error_message TEXT,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create ML system metrics table
CREATE TABLE IF NOT EXISTS ml_system_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metrics JSONB NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX idx_ml_model_metrics_model ON ml_model_metrics(model_id);
CREATE INDEX idx_ml_model_metrics_timestamp ON ml_model_metrics(timestamp);
CREATE INDEX idx_ml_inference_metrics_model ON ml_inference_metrics(model_id);
CREATE INDEX idx_ml_inference_metrics_timestamp ON ml_inference_metrics(timestamp);
CREATE INDEX idx_ml_system_metrics_timestamp ON ml_system_metrics(timestamp);

-- Add RLS policies
ALTER TABLE ml_model_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE ml_inference_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE ml_system_metrics ENABLE ROW LEVEL SECURITY;

-- Policies for ml_model_metrics
CREATE POLICY "Users can view their workspace's model metrics"
    ON ml_model_metrics FOR SELECT
    USING (model_id IN (
        SELECT id FROM ml_models
        WHERE workspace_id IN (
            SELECT workspace_id FROM workspace_members
            WHERE user_id = auth.uid()
        )
    ));

CREATE POLICY "Users can insert model metrics"
    ON ml_model_metrics FOR INSERT
    WITH CHECK (model_id IN (
        SELECT id FROM ml_models
        WHERE workspace_id IN (
            SELECT workspace_id FROM workspace_members
            WHERE user_id = auth.uid()
            AND role IN ('owner', 'admin')
        )
    ));

-- Policies for ml_inference_metrics
CREATE POLICY "Users can view their workspace's inference metrics"
    ON ml_inference_metrics FOR SELECT
    USING (model_id IN (
        SELECT id FROM ml_models
        WHERE workspace_id IN (
            SELECT workspace_id FROM workspace_members
            WHERE user_id = auth.uid()
        )
    ));

CREATE POLICY "Users can insert inference metrics"
    ON ml_inference_metrics FOR INSERT
    WITH CHECK (model_id IN (
        SELECT id FROM ml_models
        WHERE workspace_id IN (
            SELECT workspace_id FROM workspace_members
            WHERE user_id = auth.uid()
            AND role IN ('owner', 'admin')
        )
    ));

-- Policies for ml_system_metrics
CREATE POLICY "Users can view system metrics"
    ON ml_system_metrics FOR SELECT
    USING (true);

CREATE POLICY "Only admins can insert system metrics"
    ON ml_system_metrics FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM workspace_members
            WHERE user_id = auth.uid()
            AND role = 'admin'
        )
    ); 